{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","App","props","useState","NONE","sortType","setSortType","isReversed","setReverse","visibleGoods","goods","sort","first","second","ALPABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,oFAAAA,O,eAAAA,I,qBAAAA,I,oBAAAA,M,KAuCE,IAAMC,EAAuB,SAACC,GACnC,MAAgCC,mBAASH,EAASI,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAiCH,oBAAS,GAA1C,mBAAOI,EAAP,KAAmBC,EAAnB,KAOMC,EArCD,SACLC,EADK,GAGJ,IADCL,EACF,EADEA,SAAUE,EACZ,EADYA,WAENE,EAAY,YAAOC,GAiBzB,OAfAD,EAAaE,MAAK,SAACC,EAAOC,GACxB,OAAQR,GACN,KAAKL,EAASc,QACZ,OAAOF,EAAMG,cAAcF,GAC7B,KAAKb,EAASgB,OACZ,OAAOJ,EAAMK,OAASJ,EAAOI,OAC/B,QACE,OAAO,MAITV,GACFE,EAAaS,UAGRT,EAiBFU,CAHajB,EAAVQ,MAGsB,CAAEL,WAAUE,eAE1C,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBAAkB,CAAE,WAAYjB,IAAaL,EAASc,UAExDS,QAAS,kBAAMjB,EAAYN,EAASc,UALtC,iCAUA,wBACEO,KAAK,SACLD,UAAWE,IACT,oBAAqB,CAAE,WAAYjB,IAAaL,EAASgB,SAE3DO,QAAS,kBAAMjB,EAAYN,EAASgB,SALtC,4BAUA,wBACEK,KAAK,SACLD,UAAWE,IACT,oBAAqB,CAAE,YAA2B,IAAff,IAErCgB,QAAS,kBAAMf,GAAYD,IAL7B,sBAUGA,GAAcF,IAAaL,EAASI,OAEtC,wBACEiB,KAAK,SACLD,UAAU,4BACVG,QA/CK,WACZjB,EAAYN,EAASI,MAAOI,GAAW,IA2ClC,sBAUH,6BACE,6BACGC,EACEe,KAAI,SAAAC,GAAI,OAAI,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,cClHjDC,IAASC,OACP,cAAC,EAAD,CAAKjB,MDCwB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,YCVAkB,SAASC,eAAe,W","file":"static/js/main.cc76f36e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((first, second) => {\n    switch (sortType) {\n      case SortType.ALPABET:\n        return first.localeCompare(second);\n      case SortType.LENGTH:\n        return first.length - second.length;\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\ntype Props = {\n  goods: string[],\n};\n\nexport const App: React.FC<Props> = (props) => {\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [isReversed, setReverse] = useState(false);\n  const reset = () => {\n    setSortType(SortType.NONE); setReverse(false);\n  };\n\n  const { goods } = props;\n\n  const visibleGoods\n     = getReorderedGoods(goods, { sortType, isReversed });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-info', { 'is-light': sortType !== SortType.ALPABET },\n          )}\n          onClick={() => setSortType(SortType.ALPABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-success', { 'is-light': sortType !== SortType.LENGTH },\n          )}\n          onClick={() => setSortType(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-warning', { 'is-light': isReversed === false },\n          )}\n          onClick={() => setReverse(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        { (isReversed || sortType !== SortType.NONE)\n       && (\n         <button\n           type=\"button\"\n           className=\"button is-danger is-light\"\n           onClick={reset}\n         >\n           Reset\n         </button>\n       )}\n      </div>\n\n      <ul>\n        <ul>\n          {visibleGoods\n            .map(good => <li data-cy=\"Good\" key={good}>{good}</li>)}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App, goodsFromServer } from './App';\n\nReactDOM.render(\n  <App goods={goodsFromServer} />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}